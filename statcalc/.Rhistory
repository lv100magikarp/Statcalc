confusionMatrix(predict(mod1,vowel.test),vowel.test$y)
confusionMatrix(predict(mod2,vowel.test),vowel.test$y)
confusionMatrix(predict(mod1,vowel.test),predict(mod2,vowel.test),vowel.test$y)
table(predict(mod1,vowel.test),predict(mod2,vowel.test))
eq <- predict(mod1,vowel.test)==predict(mod2,vowel.test)
confusionMatrix(predict(mod2,vowel.test[eq,]),vowel.test$y[eq])
mean(predict(mod2,vowel.test[eq,])==vowel.test$y[eq])
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
sqrt(sum((predict(mod1,vowel.test)-vowel.test$y)^2))
m1 <- train(diagnosis~.,data=adData,method='rf')
m2 <- train(diagnosis~.,data=adData,method='gbm',verbose=F)
m3 <- train(diagnosis~.,data=adData,method='lda')
m1 <- train(diagnosis~.,data=training,method='rf')
m2 <- train(diagnosis~.,data=training,method='gbm',verbose=F)
m3 <- train(diagnosis~.,data=training,method='lda')
combdf <- data.frame(pred1=predict(m1,testing),pred2=predict(m2,testing),
pred3=predict(m3,testing),testing$diagnosis)
m4 <- train(diagnosis~.,data=combdf,method='rf')
dim(combdf)
View(combdf)
length(combdf$pred1)
combdf <- data.frame(pred1=predict(m1,testing),pred2=predict(m2,testing),
pred3=predict(m3,testing),diagnosis=testing$diagnosis)
m4 <- train(diagnosis~.,data=combdf,method='rf')
combpred <- predict(m4,combdf)
confusionMatrix(combpred,testing$diagnosis)
confusionMatrix(predict(m1,testing),testing$diagnosis)
confusionMatrix(predict(m2,testing),testing$diagnosis)
confusionMatrix(predict(m3,testing),testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?plot.enet
?plot.net
?train
?glm
install.packages('glmnet')
?plot.enet
install.packages('plotnet')
mod <- train(CompressiveStrength~.,data=training,method='lasso')
?plot.enet
elasticnet::plot.enet(mod)
elasticnet::plot.enet(mod,xvar=penalty)
elasticnet::plot.enet(mod,xvar='penalty')
plot.enet(mod,xvar='penalty')
class(mod)
?enet
plot.enet(mod$finalModel,xvar='penalty')
plot.enet(mod$finalModel)
plot.enet(mod$finalModel,xvar=penalty)
plot.enet(mod$finalModel,xvar='penalty')
plot.enet(mod$finalModel,xvar='penalty',color=names(training))
plot.enet(mod$finalModel,xvar='penalty',color=mod$coefnames)
source('https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv',destfile = '~/gaData.csv')
library(lubridate)
dat <- read.csv('gaData.csv')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv',destfile = '~/gaData.csv')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv',destfile = 'D:/Rcodes/gaData.csv')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv',destfile = 'D:/Rcodes')
getwd()
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv',destfile = '~/gaData.csv')
library(lubridate)
dat <- read.csv('gaData.csv')
dat <- read.csv('gaData.csv')
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages('forecast')
library(forecast)
?bats
bats(tstrain)
model <- bats(tstrain)
forecast(model,testing)
forecast(model)
?forecast
fcast <- forecast(model)
fcast <- forecast(model,h=testing,level=95)
fcast <- forecast(model,h=235,level=95)
View(testing)
fcast
mean(testing$visitsTumblr <= fcast$upper & testing$visitsTumblr >= fcast$lower)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
?svm
mod <- svm(CompressiveStrength~.,data=training)
prediction <- predict(mod,testing)
sqrt(mean((prediction-testing$CompressiveStrength)^2))
set.seed(3523)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
mod <- svm(CompressiveStrength~.,data=training)
prediction <- predict(mod,testing)
sqrt(mean((prediction-testing$CompressiveStrength)^2))
combdf <- data.frame(pred1=predict(m1,training),pred2=predict(m2,training),
pred3=predict(m3,training),diagnosis=training$diagnosis)
set.seed(3433)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
m1 <- train(diagnosis~.,data=training,method='rf')
combdf <- data.frame(pred1=predict(m1,training),pred2=predict(m2,training),
pred3=predict(m3,training),diagnosis=training$diagnosis)
m4 <- train(diagnosis~.,data=combdf,method='rf')
combpred <- predict(m4,combdf)
confusionMatrix(predict(m3,testing),testing$diagnosis)
confusionMatrix(predict(m4,testing),testing$diagnosis)
combdf <- data.frame(pred1=predict(m1,testing),pred2=predict(m2,testing),
pred3=predict(m3,testing),diagnosis=testing$diagnosis)
m4 <- train(diagnosis~.,data=combdf,method='rf')
confusionMatrix(combpred,testing$diagnosis)
combpred <- predict(m4,combdf)
confusionMatrix(combpred,testing$diagnosis)
confusionMatrix(predict(m1,testing),testing$diagnosis)
confusionMatrix(predict(m2,testing),testing$diagnosis)
confusionMatrix(predict(m3,testing),testing$diagnosis)
set.seed(62433)
m1 <- train(diagnosis~.,data=training,method='rf')
m2 <- train(diagnosis~.,data=training,method='gbm',verbose=F)
m3 <- train(diagnosis~.,data=training,method='lda')
combdf <- data.frame(pred1=predict(m1,testing),pred2=predict(m2,testing),
pred3=predict(m3,testing),diagnosis=testing$diagnosis)
m4 <- train(diagnosis~.,data=combdf,method='rf')
combpred <- predict(m4,combdf)
confusionMatrix(combpred,testing$diagnosis)
confusionMatrix(predict(m1,testing),testing$diagnosis)
confusionMatrix(predict(m2,testing),testing$diagnosis)
confusionMatrix(predict(m3,testing),testing$diagnosis)
data <- read.csv('~/traindata.csv',na.strings=c('','NA'))
validation <- read.csv('~/testdata.csv',na.strings=c('','NA'))
data <- data[,-(1:7)]
validation <- validation[,-(1:7)]
complete <- rep(NA,ncol(data))
for(i in 1:ncol(data)){
complete[i] <- mean(complete.cases(data[,i]))>=0.5
}
data2 <- data[,complete]
valid2 <- validation[,complete]
set.seed(12345)
library(caret);library(randomForest)
inTrain <- createDataPartition(data2$classe,times=5,p=0.7,list=F)
train <- data2[inTrain,]
test <- data2[-inTrain,]
mod1 <- train(classe~.,train,method='glm')
inTrain <- createDataPartition(data2$classe,p=0.7,list=F)
train <- data2[inTrain,]
test <- data2[-inTrain,]
mod1 <- train(classe~.,train,method='glm')
mod1 <- train(classe~.,train,method='gbm')
mod1 <- train(classe~.,train,method='gbm',verbose=F)
View(data2)
corr(data2[,2],data2$classe)
cor(data2[,2],data2$classe)
prcomp(train)
lm(classe~.,data=train)
summary(lm(classe~.,data=train))
summary(glm(classe~.,data=train,family='binomial'))
mod1 <- train(classe~.,train,method='glm',family='binomial')
RF <- randomForest(classe~.,train)
predRF <- predict(RF,test)
confusionMatrix(predRF,test$classe)
RR <- train(classe~.,train,method='ridge')
RR <- train(classe~.,train,method='lasso')
GLM <- glm(classe~.,data=train,family='binomial')
predGLM <- (GLM,test)
predGLM <- predict(GLM,test)
confusionMatrix(predGLM,test$classe)
GLM <- train(classe~.,train,method='gbm',verbose=F)
library(MASS)
step <- stepAIC(lm(classe~.,data=train))
View(train)
mean(is.numeric(train[,1:52]))
mean(is.numeric(train[,1]))
mean(is.numeric(train[,2]))
apply(train,2,function(x) mean(is.numeric(x)))
v <- rep(NA,53)
for(i in 1:53){
v[i] <- is.numeric(train[,i])
}
v
step <- stepAIC(glm(classe~.,data=train,family='binomial'))
step$rank
step$coefficients
names(step$coefficients)
LDA <- train(classe~.,data=train,method='lda')
predGLM <- (step,test)
predGLM <- predict(step,test)
B <- train(classe~.,data=train,method='ada')
predLDA <- predict(LDA,test)
confusionMatrix(predLDA,test$classe)
library(nnet)
MULTI <- multinom(classe~.,data=train)
predMULTI <- predict(MULTI,test)
summary(MULTI)
MULTI$coefnames
step <- stepAIC(MULTI)
confusionMatrix(predMULTI,test$classe)
MULTI$value
MULTI$vcoefnames
MULTI$fitted.values
MULTI$weights
MULTI$AIC
confusionMatrix(predRF,test$classe)
df <- data.frame(predM=predMULTI,predL <- predLDA,predR <- predRF,test$classe)
df <- data.frame(predM=predMULTI,predL <- predLDA,predR <- predRF,classe=test$classe)
df <- data.frame(predM=predMULTI,predL=predLDA,predR=predRF,classe=test$classe)
combmod <- train(classe~.,data=df,method='rf')
predVRF <- predict(RF,valid2)
confusionMatrix(predVRF,valid2$classe)
View(valid2)
predVRF
View(valid2)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel('Data science FTW!'),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
getwd()
library(shiny)
shinyUI(pageWithSidebar(
headerPanel('Data science FTW!'),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
shinyServer(
function(input,output){} #does nothing
)
runApp()
runApp() #run at working directory, can set manually
install.packages('rtools')
rsconnect::setAccountInfo(name='lv100magikarp', token='55A219CA4118B36D09D803EC011EA6F2', secret='gT19sG0ZsVbBoGhEAEEgoBN8CWMIQKddO2aNu3p6')
library(shiny)
library(manipulate)
manipulate(
plot(1:x),
x=slider(1,100)
)
myHist <- function(mu){
hist(galton$child,col='blue',breaks=100)
lines(c(mu,mu),c(0,150),col='red',lwd=5)
mse <- mean((galton$child-mu)^2)
text(63,150,paste('mu=',mu))
text(63,140,paste('MSE=',round(mse,2)))
}
manipulate(myHist(mu,mu=slider(62,74,step=0.5)))
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
library(UsingR)
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
require(rCharts)
install.packages('rCharts')
library(devtools)
install_github('rCharts','ramnathv')
library(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
library(rCharts)
haireye <- as.data.frame(HairEyeColor)
n1 <- nPlot(Freq~Hair,group='Eye',type='multiBarChart',
data=subset(haireye,Sex=='Male')
)
n1$save('fig/n1.html',cdn=T)
n1$save('D:/R codes/n1.html',cdn=T)
cat('<iframe src="D:/R codes/n1.html" width=100%, height=600></iframe>')
n1
names(iris) <- gsub('\\.','',names(iris))
?rPlot
r1$save('D:/R codes/r1.html',cdn=T)
r1 <- rPlot(SepalLength~SepalWidth | Species,data=iris,color='Species',
type='point')
r1$save('D:/R codes/r1.html',cdn=T)
data(economics,package='ggplot2')
econ <- transform(economics,date=as.character(date))
m1 <- mPlot(x='date',y=c('psavert','uempmed'),type='Line',data=econ)
m1$set(pointSize=0,lineWidth=1)
m1$save('D:/R codes/m1.html',cdn=T)
m1
map3 <- Leaflet$new()
library(rCharts)
map3 <- Leaflet$new()
?Leaflet
??Leaflet
map3$setView(c(51.505,-0.09),zoom=13)
map3$marker(c(51.5,-0.09),bindPopup='<p> Hi. I am a popup </p>')
map3$marker(c(51.495,-0.083),bindPopup='<p> Hi. I am another popup </p>')
map3$dave('D:/R codes/map3.html',cdn=T)
map3$save('D:/R codes/map3.html',cdn=T)
map3
usp <- reshape2::melt(USPersonalExpenditure)
usp$Var2 <- as.numeric(as.POSIXct(paste0(usp$Var2,'-01-01')))
p4 <- Rickshaw$new()
p4$layer(value~Var2,group='Var1',data=usp,type='area',width=560)
p4$set(slider=T)
p4$save('D:/R codes/p4.html',cdn=T)
h1 <- hPlot(x='Wr.Hnd',y='NW.HND',data=MASS::survey,type=c('line','bubble',
'scatter'),group='Clap',size='Age')
install.packages('googleVis')
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart((Fruits,'Fruit','Year',options=list(width=600,height=400)))
M <- gvisMotionChart(Fruits,'Fruit','Year',options=list(width=600,height=400))
print(M,'chart')
M
install.packages('slidify')
M$html
tempdir()
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits,'Fruit','Year',options=list(width=600,height=400))
M
tempdir()
sapply(c("gvis.print.tag", "gvis.plot.tag", "gvis.tags"), getOption)
M <- gvisMotionChart(Fruits, "Fruit", "Year")
str(M)
## The output for a complete web page
M
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits,'Fruit','Year',options=list(width=600,height=400))
M
M <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
M
G <- gvisGeoChart(Exports,locationvar='Country',colorvar='Profit',options=list(width=600,height=400))
print(G,'chart')
G
plot(M1,tag='chart')
plot(M,tag='chart')
library(installr)
updateR()
updateR()
install.packages('installr')
install.packages("installr")
library(installr)
updateR()
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits,'Fruit','Year',options=list(width=600,height=400))
M
plot(M <- gvisMotionChart(Fruits,'Fruit','Year',options=list(width=600,height=400)))
plot(M)
print(M,'chart')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
print(M,'chart')
G <- gvisGeoChart(Exports,locationvar='Country',colorvar='Profit',options=list(width=600,height=400))
print(G,'chart')
G
plot(G)
df <- data.frame(label=c('US','GB','BR'),val1=c(c(1,3,4),val2=c(23,12,32)))
GM <- gvisMerge(G,M,horizontal=F)
plot(GM)
T1 <- gvisTable(Exports,options=list(width=200,height=270))
GT <- gvisMerge(G,T1,horizontal=F)
GMT <- gvisMerge(GT,M,horizontal=T,
tableOptions = 'bgcolor=\"#CCCCCC\" cellspacing=10')
plot(GMT)
install_github('ropensci/plotly')
load('courseraData.rda')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s),s=slider(0, 2, step = 0.1))
library(rCharts)
data("airquality")
dTable(airquality, sPaginationType = "full_numbers")
package.skeleton('topten')
?package.skeleton
library(devtools)
create('./topten')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderPrint
runApp()
?renderText
runApp()
runApp()
runApp()
seq()
vector()
numeric()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?reactive
runApp()
runApp()
a <- numeric()
c(a,3)
?isolate
runApp()
runApp()
runApp()
runApp()
runApp()
?if
??if
a <- numeric()
b <<- c(a,3)
b
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?renderText
runApp()
runApp()
runApp()
mean()
median()
runApp()
runApp()
runApp()
?verbatimTextOutput
library(rsconnect)
rsconnect::deployApp()
rsconnect::setAccountInfo(name='lv100magikarp',
token='55A219CA4118B36D09D803EC011EA6F2',
secret='gT19sG0ZsVbBoGhEAEEgoBN8CWMIQKddO2aNu3p6')
rsconnect::deployApp()
?rsconnect::deployApp
dir.create('./stat_calc_slidify')
setwd('./stat_calc_slidify')
library(slidify)
author('statcalc')
slidify('index.Rmd')
a <- '12,13,14'
class(a)
?strsplit
strsplit(a,split=',')
b <- '15'
strsplit(b,split=',')
as.numeric(strsplit(a,split=','))
sapply(strsplit(a,split=','),as.numeric)
class(sapply(strsplit(a,split=','),as.numeric))
as.numeric(sapply(strsplit(a,split=','),as.numeric))
runApp('D:/R codes')
runApp('D:/R codes')
runApp('D:/R codes')
a <- '12, 13,14'
as.numeric(sapply(strsplit(a,split=','),as.numeric))
